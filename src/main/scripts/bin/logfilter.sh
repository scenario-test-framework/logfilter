#!/bin/bash
#===================================================================================================
#  logfilter
#===================================================================================================
#---------------------------------------------------------------------------------------------------
# 関数定義
#---------------------------------------------------------------------------------------------------
function usage() {
    cat << __END__
$0 OPTION inputFilePath outputFilePath

OPTION
  -h, --help
    このメッセージを表示します。

  -f, --force
    出力ファイルパスが存在する場合の確認を表示しません。

  -cf, --configFile
    /path/to/configFile
    設定ファイルのパスを指定します。


  ----- 以降の設定を指定すると、設定ファイルより優先されます。 -----

  -ic, --inputCharset
    入力ファイルの文字コードを指定します。
    デフォルトは、UTF-8です。

  -oc, --outputCharset
    出力ファイルの文字コードを指定します。
    デフォルトは、入力ファイルと同じ文字コードです。

  -tf, --timeFilterFrom
    クォートで括った、指定のフォーマットで、抽出を開始する時刻を指定します。
    timeFilterTo と一緒に設定すると、AND条件で動作します。

    利用可能なタイムスタンプフォーマット
     'yyyy/MM/dd hh:mm:ss.SSS', 'yyyy/MM/dd hh:mm:ss', 'yyyy/MM/dd hh:mm', 'yyyy/MM/dd hh', 'yyyy/MM/dd'
     'yyyy-MM-dd hh:mm:ss.SSS', 'yyyy-MM-dd hh:mm:ss', 'yyyy-MM-dd hh:mm', 'yyyy-MM-dd hh', 'yyyy-MM-dd'

  -tt, --timeFilterTo
    クォートで括った、指定のフォーマットで抽出を終了する時刻を指定します。
    timeFilterFrom と一緒に設定すると、AND条件で動作します。^

  -l, --logLevelFilter
    例：'WARN,ERROR'
    抽出するログレベルを、クォートで括った、カンマ区切りで列挙します。

  -s, --stringContentFilter
    例：'SOME_CONTENT'
    抽出する文字列をクォートで括って指定します。

  -r, --regexFilter
    例：'\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}\.\d{3}'
    抽出する正規表現をクォートで括って指定します。

__END__
}

#---------------------------------------------------------------------------------------------------
#  定数
#---------------------------------------------------------------------------------------------------
# リターンコード
readonly RETCODE_SUCCESS=0
readonly RETCODE_WARN=3
readonly RETCODE_ERROR=6
# Javaリターンコード
readonly JAVA_RETCODE_SUCCESS=0
readonly JAVA_RETCODE_WARN=3
readonly JAVA_RETCODE_ERROR=6

#---------------------------------------------------------------------------------------------------
#  設定
#---------------------------------------------------------------------------------------------------
dir_before=`pwd`
cd `dirname $0`/..


#---------------------------------------------------------------------------------------------------
#  事前処理
#---------------------------------------------------------------------------------------------------
# 引数チェック
if [ $# -eq 0 -o "$1" = "-h" -o "$1" = "--help" ]; then
    usage
    exit 0
fi


#---------------------------------------------------------------------------------------------------
#  主処理
#---------------------------------------------------------------------------------------------------
# Java用環境変数設定
classpath=${CLASSPATH_LOGFILTER}:${classpath}:.:`pwd`/config:`pwd`/lib/*:

# Java呼出し
cd ${dir_before}
java -cp ${classpath} -DPID=$$ me.suwash.tools.logfilter.main.LogFilterByCommandOption "$@"
java_return_code=$?


#---------------------------------------------------------------------------------------------------
#  事後処理
#---------------------------------------------------------------------------------------------------
# 実行結果確認
if [ ${java_return_code} = ${JAVA_RETCODE_WARN} ]; then
    # warn
    exit ${RETCODE_WARN}

elif [ ${java_return_code} = ${JAVA_RETCODE_ERROR} ]; then
    # error
    exit ${RETCODE_ERROR}

else
    # success
    exit ${RETCODE_SUCCESS}
fi
